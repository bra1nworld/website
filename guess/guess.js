$(document).ready(function() {
    getSingleData();
    getData();
    leftTime(11, 10, 00, $('#today .countdown-am'));
    leftTime(14, 40, 00, $('#today .countdown-pm'));
    leftTime(11, 10, 00, $('#next .countdown-am'));
    leftTime(14, 40, 00, $('#next .countdown-pm'));
    footerResize();
    //实时预测动态滚动效果
    jQuery(".realTime-list").slide({
        mainCell: ".realTime-ul ul",
        autoPlay: true,
        effect: "topMarquee",
        vis: 6,
        interTime: 50
    });
})

//获取k线图所有241条数据
function getData() {
    // $.get("../result.json", function(result) {
    var result = {
        "changeFalg": 1,
        "changeRate": "0.036%",
        "curFalg": 1,
        "list": [3172.1003, ["3169.80", "3168.58", "3167.70", "3166.83", "3167.92", "3170.55", "3173.06", "3173.62", "3174.65", "3175.39", "3175.89", "3177.53", "3178.14", "3177.99", "3177.96", "3177.67", "3176.95", "3177.29", "3177.41", "3177.77", "3177.72", "3178.19", "3177.85", "3177.30", "3176.51", "3174.98", "3173.61", "3173.77", "3174.35", "3174.90", "3176.88", "3177.34", "3178.28", "3178.58", "3178.90", "3179.36", "3179.45", "3178.50", "3178.42", "3178.38", "3178.02", "3178.18", "3178.59", "3178.44", "3179.47", "3179.20", "3178.44", "3177.34", "3176.92", "3175.69", "3176.42", "3176.07", "3175.93", "3176.47", "3177.00", "3177.45", "3177.85", "3179.05", "3179.90", "3180.36", "3179.47", "3179.67", "3179.11", "3178.47", "3178.13", "3177.32", "3177.00", "3175.75", "3174.88", "3172.94", "3172.88", "3173.40", "3173.48", "3173.28", "3173.12", "3173.96", "3173.64", "3173.84", "3173.85", "3172.03", "3170.35", "3168.18", "3168.76", "3167.70", "3168.18", "3168.66", "3169.09", "3168.04", "3169.20", "3168.38", "3168.13", "3167.49", "3167.74", "3168.01", "3167.98", "3167.62", "3168.80", "3169.02", "3169.61", "3170.10", "3170.59", "3170.89", "3171.29", "3171.46", "3171.03", "3170.73", "3171.69", "3171.44", "3171.50", "3171.66", "3171.88", "3171.59", "3172.04", "3172.25", "3173.04", "3172.97", "3173.38", "3173.68", "3173.39", "3173.95", "3174.40", "3173.51", "3173.65", "3172.47", "3172.72", "3172.11", "3172.57", "3172.69", "3172.49", "3172.62", "3171.94", "3171.60", "3170.81", "3170.53", "3169.87", "3169.64", "3169.90", "3169.28", "3169.38", "3169.43", "3168.83", "3167.59", "3166.82", "3166.28", "3166.82", "3166.83", "3167.01", "3167.15", "3167.41", "3168.14", "3167.91", "3166.74", "3165.49", "3164.59", "3163.27", "3162.74", "3163.40", "3163.80", "3164.46", "3164.63", "3164.65", "3164.55", "3164.55", "3164.28", "3163.89", "3164.24", "3163.95", "3163.46", "3163.61", "3162.80", "3162.39", "3160.85", "3159.93", "3159.15", "3159.88", "3162.04", "3163.58", "3165.11", "3165.00", "3165.21", "3165.20", "3164.46", "3164.64", "3164.48", "3164.70", "3165.14", "3164.90", "3163.46", "3162.17", "3162.15", "3162.40", "3163.06", "3161.46", "3160.69", "3159.67", "3159.58", "3160.92", "3162.25", "3163.60", "3164.43", "3163.44", "3163.99", "3163.98", "3163.31", "3162.86", "3161.91", "3161.91", "3161.92", "3162.31", "3163.00", "3163.91", "3164.92", "3165.58", "3165.33", "3164.63", "3165.00", "3164.69", "3164.39", "3165.20", "3165.43", "3166.15", "3166.93", "3167.17", "3168.13", "3168.61", "3169.02", "3169.12", "3168.43", "3168.20", "3167.72", "3166.45", "3165.28", "3164.32", "3165.94", "3168.19", "3171.86", "3172.43", "3173.51", "3172.93", "3173.41", "3173.15", "3173.24"],
            [4278407, 1512317, 1791323, 1334345, 1117307, 1329514, 1437384, 1366667, 1290463, 1176876, 1145756, 1174094, 1097293, 1112493, 1004467, 1052124, 996132, 1032856, 894334, 852224, 865352, 929191, 852638, 875203, 1054323, 1015995, 1176770, 1258709, 956407, 954569, 864550, 771318, 777072, 671976, 687204, 711884, 742531, 704682, 703971, 658109, 592506, 623899, 645261, 646906, 671330, 690140, 719597, 749401, 759389, 706600, 676692, 611220, 553588, 565218, 588854, 586539, 511297, 520437, 567464, 575283, 572194, 592840, 819531, 783871, 644124, 658453, 730803, 748217, 865899, 863191, 754962, 688426, 543199, 481456, 507757, 573879, 457800, 446976, 459353, 651550, 1012872, 1011099, 935096, 732088, 685461, 604696, 500290, 479509, 409596, 465155, 480717, 463927, 540755, 502190, 530217, 545127, 497162, 431429, 425494, 444936, 442322, 390817, 381026, 406897, 471437, 499894, 417277, 306246, 335735, 350398, 394527, 323877, 363652, 366113, 369513, 363741, 415233, 333743, 341949, 362336, 20328, 906285, 269262, 296902, 269309, 272930, 296441, 267930, 284198, 247797, 354814, 368770, 434140, 448627, 435402, 390423, 427297, 367592, 378026, 428430, 489618, 638374, 598932, 619357, 595167, 440234, 474257, 407159, 372113, 356110, 402031, 447507, 700686, 691623, 726392, 769503, 646469, 590230, 549422, 482072, 412946, 440223, 486659, 616766, 582596, 553145, 475097, 545222, 500627, 649452, 641163, 796919, 707473, 650349, 686346, 756564, 599113, 547462, 439806, 374505, 364507, 360001, 387341, 336904, 363655, 332141, 373853, 484124, 549788, 540102, 504461, 462660, 383735, 435715, 656086, 805436, 653914, 560118, 514902, 452291, 399281, 461049, 447442, 372146, 377714, 397809, 407539, 366685, 459571, 543687, 477778, 488504, 473191, 482093, 489194, 560926, 627773, 564303, 648379, 665326, 746657, 650316, 714265, 694949, 743398, 771881, 700824, 729545, 795775, 879432, 992328, 1165780, 1547103, 1888814, 2004344, 2684902, 1915543, 1920636, 1343078, 2014929, 1985418, 45626],
            [4696941600, 1679094270, 2020134530, 1584879740, 1345667710, 1520382080, 1673652220, 1551194880, 1511295620, 1365554560, 1332228220, 1342289790, 1247154430, 1289435900, 1144363900, 1236733180, 1173870720, 1179173630, 974619200, 993288320, 988716930, 1017207100, 1013843200, 1056944450, 1259008812, 1153019260, 1251729280, 1320272380, 1103385090, 1008633090, 981718340, 894069570, 860998270, 750092160, 796649790, 823459330, 849395580, 823280190, 863026690, 810058110, 735365700, 744651390, 726784260, 803806270, 846233600, 855683460, 913392190, 910243970, 884496646, 838477250, 795087620, 714945280, 668619710, 684135940, 704750080, 682551420, 625680640, 620938430, 641981950, 666270020, 674466560, 692997380, 907939460, 901851330, 807528510, 815714940, 819552260, 823813250, 962904190, 972587070, 851545860, 752558020, 636627520, 553424320, 558828800, 585073340, 535625568, 516836992, 504673760, 709900480, 1082666750, 1107054340, 1026114940, 809912179, 717480640, 645426240, 549026820, 555008380, 487368352, 510062624, 525732960, 531066848, 562403460, 556596100, 588908990, 584861950, 528554848, 461233888, 463792768, 485342144, 478550144, 458873344, 431273440, 464893824, 510955648, 528018560, 457797312, 340670432, 365550336, 400993920, 411659552, 367770624, 401385728, 386894567, 416075968, 406075072, 428195104, 367032352, 373386144, 349379776, 17606963, 887744640, 289841792, 315693312, 290487712, 299724544, 316171296, 297391104, 315089120, 279063360, 355204608, 432542304, 466967008, 487697312, 454252864, 450890720, 461812832, 409302245, 399427232, 464908000, 502914240, 647312830, 655708670, 706373006, 667852121, 512641045, 510653536, 459609152, 411872384, 418882208, 468299936, 503300160, 667292160, 753057660, 804860930, 891001150, 754725760, 689629380, 611565250, 544305660, 461573632, 503990752, 541046270, 641281790, 614357060, 573631040, 500209344, 556691260, 551379710, 657797206, 681010620, 838053120, 779402620, 753993090, 758752867, 831058050, 685180480, 623357250, 495383968, 429831136, 425194976, 418514080, 462942824, 400130272, 440136640, 395600672, 449854016, 544204670, 641482847, 644833150, 592140540, 549573950, 474834432, 519212288, 664473920, 818555260, 739025090, 635221060, 584085760, 491984416, 457425920, 469835744, 451410944, 403552576, 432614016, 449456256, 470629408, 416388544, 517165344, 590771900, 534130304, 542554750, 542393967, 543395710, 550429310, 639095230, 711738620, 659698370, 747889600, 773579010, 850013310, 754175940, 793385660, 781958140, 831924030, 846240580, 801372290, 857713090, 947483780, 1012135040, 1128088127, 1324626820, 1726291710, 1991042690, 2092484350, 2315231740, 1909889540, 1955251970, 1537985280, 2066814980, 2146027650, 53435308]
        ],
        "nowDate": "2017/04/21/星期五15:00",
        "success": 1
    }

    if (result.success == 1) {
        refreshEcharts('上证指数(000001.SH)', result.list, 'main1', 'main2');
    } else {
        refreshEcharts('', [
            [],
            [],
            []
        ]);
    }
    // }, "json");
}

//获取单条实时数据
function getSingleData() {

    var result = {
        changeFalg: 1,
        changePrice: "45.3",
        changeRate: "1.7856%",
        curFalg: 1,
        curPrice: "3116.5916",
        nowDate: "2017/04/25/星期二11:20",
        success: 1,
        tradeVol: 97695918,
    }
    if (result.success == 1) {
        result.changeRate = ((result.changeRate.substring(0, result.changeRate.length - 1)) * 1).toFixed(2) + '%';
        $(".kLine .nowDate").html(result.nowDate);
        $(".kLine .curPrice").html((result.curPrice * 1).toFixed(2));
        $(".kLine .changePrice").html((result.changePrice * 1).toFixed(2));
        $(".kLine .changeRate").html(result.changeRate);
        if (result.curFalg == 1) {
            $("#prices").removeClass().addClass('red');
        } else {
            $("#prices").removeClass().addClass('green');
        }
        if (result.changeFalg == 1) {
            $("#prices .change>i").removeClass().addClass('guessUp changeArrow');
        } else {
            $("#prices .change>i").removeClass().addClass('guessDown changeArrow');
        };
    }
    // $.get("../result.json", function(result) {


    // }, "json");
}
/**
 * 倒计时最终时间
 * 例：15,30,00
 * @param {any} h 小时
 * @param {any} m 分钟
 * @param {any} s 秒
 */
function leftTime(h, m, s, dom, fn) {
    var ts = new Date();
    ts.setHours(h, m, s);
    if (fn && (new Date()) <= ts) {
        //到达终点时执行
        fn();
    };

    dom.countdown({
        timestamp: ts,
        callback: function(h, m, s) {
            //回调函数

        }
    });
}

/*
 * fmt "yyyy-MM-dd"
 *"yyyy-MM-dd HH:mm:ss"
 */
Date.prototype.Format = function(fmt) { //author: meizz 
    var o = {
        "M+": this.getMonth() + 1, //月份 
        "d+": this.getDate(), //日 
        "h+": this.getHours(), //小时 
        "m+": this.getMinutes(), //分 
        "s+": this.getSeconds(), //秒 
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度 
        "S": this.getMilliseconds() //毫秒 
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
}